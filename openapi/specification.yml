swagger: "2.0"
info:
  version: "1.0.0"
  title: "shorturl"
basePath: "/v1"
tags:
- name: "url"
  description: "Everything about the url handling"
- name: "user"
  description: "Operations about user"
schemes:
- "http"
paths:
  /url:
    post:
      tags:
      - "url"
      summary: "Generate a short url for a long url."
      description: "Generate a short url for a long url."
      operationId: "create_url"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        description: "api key for generating short url"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/CreateUrlObj"
      responses:
        "200":
          description: "Return short url"
          schema:
            $ref: "#/definitions/ShortUrlObj"
        "400":
          description: "Invalid input syntax"
      x-swagger-router-controller: "shorturl.web.controllers.urls_controller"
  /url/{shorturl}:
    get:
      tags:
      - "url"
      summary: "Redirects to long url."
      description: ""
      operationId: "redirect_url"
      produces:
      - "application/json"
      parameters:
      - name: "shorturl"
        in: "path"
        description: "shorturl for the fetching the corresponding long url"
        required: true
        type: "string"
      responses:
        "308":
          description: "Redirection successful."
        "404":
          description: "shorturl not found"
      x-swagger-router-controller: "shorturl.web.controllers.urls_controller"
    delete:
      tags:
      - "url"
      summary: "Deletes the short url"
      description: ""
      operationId: "delete_url"
      produces:
      - "applicaiton/json"
      parameters:
      - name: "api_key"
        in: "header"
        description: "api key for deleting shorturl"
        required: true
        type: "string"
      - name: "shorturl"
        in: "path"
        description: "shorturl for deleting the shorturl"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successfully deleted"
        "404":
          description: "shorturl not found"
      x-swagger-router-controller: "shorturl.web.controllers.urls_controller"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: ""
      operationId: "create_user"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object for creating new user."
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "Return api key"
          schema:
            $ref: "#/definitions/ApiKeyObj"
        "406":
          description: "User name already exists"
      x-swagger-router-controller: "shorturl.web.controllers.users_controller"
  /user/{username}:
    put:
      tags:
      - "user"
      summary: "Update user"
      description: ""
      operationId: "update_user"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: ""
        required: true
        type: "string"
      - name: "password"
        in: "header"
        description: ""
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/UpdatedUser"
      responses:
        "200":
          description: "Password updated successfully"
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "shorturl.web.controllers.users_controller"
  /user/key/{username}:
    get:
      tags:
      - "user"
      summary: "Get key by user name"
      description: ""
      operationId: "get_key"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The username for which key is to be fetched."
        required: true
        type: "string"
      - name: "password"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiKeyObj"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "shorturl.web.controllers.users_controller"
    put:
      tags:
      - "user"
      summary: "Update current key with a new generated key"
      description: ""
      operationId: "update_key"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The username for which api key is to be updated."
        required: true
        type: "string"
      - name: "password"
        in: "header"
        description: ""
        required: true
        type: "string"
      responses:
        "200":
          description: "Successfully changed the api_key"
          schema:
            $ref: "#/definitions/ApiKeyObj"
        "400":
          description: "Invalid username or password supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "shorturl.web.controllers.users_controller"
definitions:
  CreateUrlObj:
    type: "object"
    required:
    - "long_url"
    properties:
      long_url:
        type: "string"
      username:
        type: "string"
      custom_alias:
        type: "string"
      time_to_live:
        type: "string"
    example:
      time_to_live: "time_to_live"
      custom_alias: "custom_alias"
      long_url: "long_url"
      username: "username"
  ShortUrlObj:
    type: "object"
    required:
    - "short_url"
    properties:
      short_url:
        type: "string"
    example:
      short_url: "short_url"
  ApiKeyObj:
    type: "object"
    required:
    - "api_key"
    properties:
      api_key:
        type: "string"
    example:
      api_key: "api_key"
  User:
    type: "object"
    required:
    - "email"
    - "password"
    - "username"
    properties:
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
  UpdatedUser:
    type: "object"
    required:
    - "newpassword"
    properties:
      newpassword:
        type: "string"
