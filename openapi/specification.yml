swagger: "2.0"
info:
  version: "1.0.0"
  title: "shorturl"
basePath: "/v1"
tags:
- name: "url"
  description: "Everything about the url handling"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /url:
    post:
      tags:
      - "url"
      summary: "Generate a short url for a long url."
      description: "Generate a short url for a long url."
      operationId: "create_url"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        schema:
          $ref: "#/definitions/Url"
        required: true
      responses:
        "200":
          description: "Returns a string of fixed length."
      security:
      - api_key: []
      x-swagger-router-controller: "shorturl.web.controllers.urls_controller"
  /url/{shorturl}:
    get:
      tags:
      - "url"
      summary: "Redirects to long url."
      description: "Redirects to long url."
      operationId: "redirect_url"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "shorturl"
        in: "path"
        description: "shorturl for the fetching the corresponding long url"
        required: true
        type: "string"
      responses:
        "200":
          description: "Redirects to original url."
        "404":
          description: "shorturl not found"
      x-swagger-router-controller: "shorturl.web.controllers.urls_controller"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "create_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
      x-swagger-router-controller: "shorturl.web.controllers.users_controller"
      
  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "login_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Login user"
        required: true
        schema:
          $ref: "#/definitions/Login"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
      x-swagger-router-controller: "shorturl.web.controllers.users_controller"
      
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: "This can only be done by the logged in user."
      operationId: "logout_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "shorturl.web.controllers.users_controller"
      
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: "This can only be done by the logged in user."
      operationId: "get_user_by_name"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserData"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "shorturl.web.controllers.users_controller"
      
    put:
      tags:
      - "user"
      summary: "Update user"
      description: "This can only be done by the logged in user."
      operationId: "update_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/UpdateUser"
      responses:
        "200":
          description: "Password updated successfully"
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "shorturl.web.controllers.users_controller"
      
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "delete_user"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "shorturl.web.controllers.users_controller"
          
  /user/key/{username}:
    get:
      tags:
        - "user"
      summary: "Get key by user name"
      description: "This can only be done by the logged in user."
      operationId: "get_key_by_name"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The username for which key is to be fetched."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Key"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "shorturl.web.controllers.users_controller"
      
    put:
      tags:
      - "user"
      summary: "Update key by user name"
      description: "This can only be done by the logged in user."
      operationId: "update_key_by_name"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The username for which is key is to be updated."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated key object"
        required: true
        schema:
          $ref: "#/definitions/Key"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "shorturl.web.controllers.users_controller"
      
    delete:
      tags:
      - "user"
      summary: "Delete key by the user name"
      description: "This can only be done by the logged in user."
      operationId: "delete_key_by_name"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The username for which key is to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
      x-swagger-router-controller: "shorturl.web.controllers.users_controller"
          
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Key:
    type: "object"
    required:
    - "key"
    properties:
      key:
        type: "string"
  User:
    type: "object"
    required:
    - "username"
    - "email"
    - "password"
    properties:
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
  Login:
    type: "object"
    required:
    - "username"
    - "password"
    properties:
      username:
        type: "string"
      password:
        type: "string"
  UserData:
    type: "object"
    required:
    - "username"
    - "email"
    properties:
      username:
        type: "string"
      email:
        type: "string"
  UpdateUser:
    type: "object"
    required:
      - "password"
    properties:
      password:
        type: "string"
  Url:
    type: "object"
    required: 
    - "long_url"
    properties:
      long_url:
        type: "string"
      username:
        type: "string"
      custom_alias:
        type: "string"
      time_to_live:
        type: "string"